---

- name: create directories needed for django
  file:
    path: "{{ item.path | default(item) | mandatory }}"
    owner: "{{ item.owner | default(_django_user, true) | default(omit, true) }}"
    group: "{{ item.group | default(omit, true) }}"
    mode: "{{ item.mode | default(omit, true) }}"
    state: directory
  with_items: "{{ django_directories }}"
  register: _django_directories_results

- name: create directories needed for settings files
  file:
    path: "{{ item.dest | mandatory | dirname }}"
    owner: "{{ item.dir_owner | default(item.owner, true) | default(_django_user, true) | default(omit, true) }}"
    group: "{{ item.dir_group | default(item.group, true) | default(omit, true) }}"
    mode: "{{ item.dir_mode | default(item.mode, true) | default(omit, true) }}"
    state: directory
  with_items: "{{ django_settings_templates }}"
  register: _django_settings_directories_results

- name: install settings files from templates
  template:
    src: "{{ item.src | mandatory }}"
    dest: "{{ item.dest | mandatory }}"
    owner: "{{ item.owner | default(_django_user, true) }}"
    group: "{{ item.group | default(omit, true) }}"
    mode: "{{ item.mode | default(omit, true) }}"
    backup: "{{ item.backup | default(omit) }}"
    force: "{{ item.force | default(omit) }}"
  with_items: "{{ django_settings_templates }}"
  register: _django_settings_templates_results

- name: reset django command results
  set_fact:
    _django_command_results: []

- name: run django pre commands
  include_tasks: django_manage.yml
  with_items: "{{ django_pre_commands }}"
  register: _django_manage_results

- name: combine pre command results
  set_fact:
    _django_pre_commands_results:
      changed: "{{ _django_command_results | selectattr('changed', 'defined') | selectattr('changed') | list | length | bool }}"
      failed: "{{ _django_command_results | selectattr('failed', 'defined') | selectattr('failed') | list | length | bool }}"
      msg: "All items completed"
      results: "{{ _django_manage_results.results | _django_zipmerge(_django_command_results) | list }}"

- name: reset django command results
  set_fact:
    _django_command_results: []

- name: run django main commands
  include_tasks: django_manage.yml
  with_items: "{{ django_main_commands }}"
  register: _django_manage_results

- name: combine main command results
  set_fact:
    _django_main_commands_results:
      changed: "{{ _django_command_results | selectattr('changed', 'defined') | selectattr('changed') | list | length | bool }}"
      failed: "{{ _django_command_results | selectattr('failed', 'defined') | selectattr('failed') | list | length | bool }}"
      msg: "All items completed"
      results: "{{ _django_manage_results.results | _django_zipmerge(_django_command_results) | list }}"

- name: reset django command results
  set_fact:
    _django_command_results: []

- name: run django post commands
  include_tasks: django_manage.yml
  with_items: "{{ django_post_commands }}"
  register: _django_manage_results

- name: combine pre command results
  set_fact:
    _django_post_commands_results:
      changed: "{{ _django_command_results | selectattr('changed', 'defined') | selectattr('changed') | list | length | bool }}"
      failed: "{{ _django_command_results | selectattr('failed', 'defined') | selectattr('failed') | list | length | bool }}"
      msg: "All items completed"
      results: "{{ _django_manage_results.results | _django_zipmerge(_django_command_results) | list }}"

- name: check if anything changed after running updates and notify handlers
  set_fact:
    _django_updated: >-
      {{ (_django_directories_results.changed or
      _django_settings_directories_results.changed or
      _django_settings_templates_results.changed or
      _django_pre_commands_results.changed or
      _django_main_commands_results.changed or
      _django_post_commands_results.changed) | bool }}
  changed_when: _django_updated
  notify: "{{ django_notify_on_updated | default('django updated', true) }}"
